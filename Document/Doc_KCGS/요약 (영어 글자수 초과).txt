본 논문에서는 많은 수의 파티클 간의 실시간 충돌 알고리즘을 제안한다. 

제안된 알고리즘은 3차원 파티클 위치 정보를 2차원 이미지에 투영하고 이를 기반으로 충돌 처리를 수행하는 단계와 실제 렌더링을 수행하는 두 단계를 거친다. 

첫 단계에선 파티클 간의 충돌처리를 수행하며 위치를 갱신한다. 

이때 사용되는 데이터는 파티클의 3차원 월드 공간 위치를 저장한 2차원 형태의 텍스처이며 이를 충돌 감지 텍스처라 칭한다. 

각 파티클의 충돌 처리를 위해서 해당 파티클의 투영 결과를 기반으로 텍스처 좌표를 계산하고 이 좌표를 기준으로 충돌 감지 텍스처를 샘플링하여 파티클의 3차원 위치 값을 읽어온다. 

충돌 감지 텍스처는 파티클의 3차원 정보를 투영하여 얻는 2차원 투영 좌표를 기반으로 갱신되기 때문에 앞서 얻은 텍스처 좌표의 주변을 주어진 범위 내에서 샘플링하면 주변에 존재하는 파티클들의 위치 정보를 얻을 수 있다. 

이 정보를 이용해 현재 파티클과의 충돌처리를 수행하고 처리 후 변화되는 3차원 좌표 형태의 값은 컬러 코드로 변환하여 충돌 감지 텍스처에 갱신한다. 

두 번째 단계는 첫 번째 단계에서 사용된 버퍼를 활용하는 렌더링 패스이다. 

해당 버퍼는 충돌처리가 끝난 3차원 위치 정보를 가지고 있으며 이를 이용하면 기하 셰이더를 통해 빌보드 형태의 쿼드를 생성할 수 있다. 

이 쿼드를 파티클 형태로 렌더링하여 최종 결과를 만들어 낸다. 

------------------------

본 논문에서는 많은 수의 파티클 간의 실시간 충돌 알고리즘을 제안한다. 제안된 알고리즘은 두단계의 알고리즘으로 이루어져있다. 첫 단계에서는 3차원 파티클 위치 정보를 2차원 이미지에 투영하고 이를 기반으로 충돌처리를 수행한다. 이때 사용되는 2차원 형태의 텍스처를 충돌 감지 텍스처라 칭한다. 두 번째 단계는 첫 번째 단계에서 사용된 버퍼를 활용하는 렌더링 패스이다. 해당 버퍼는 충돌처리가 끝난 3차원 위치 정보를 가지고 있으며 이를 이용하면 기하 셰이더를 통해 빌보드 형태의 쿼드를 생성할 수 있다. 이 쿼드를 파티클 형태로 렌더링하여 최종 결과를 만들어 낸다. 

------------------------

본 논문에서는 많은 수의 파티클 간의 실시간 충돌 알고리즘을 제안한다. 제안된 알고리즘은 3차원 파티클 위치 정보를 2차원 이미지에 투영하고 이를 기반으로 충돌 처리를 수행하는 단계와 실제 렌더링을 수행하는 두 단계를 거친다. 첫 단계에선 충돌 감지 텍스처라 불리는 파티클의 3차원 월드 공간 위치를 저장한 2차원 형태의 텍스처를 사용하여 파티클 간의 충돌처리를 수행하며 위치를 갱신한다. 두 번째 단계는 첫 번째 단계에서 사용된 버퍼를 활용하는 단계이다. 해당 버퍼는 충돌처리가 끝난 3차원 위치 정보를 가지고 있으며 이를 이용하면 기하 셰이더를 통해 쿼드를 생성하여 파티클 형태로 렌더링하여 최종 결과를 만들어 낸다. 

In this paper, we propose a real-time collision algorithm between a large number of particles. The proposed algorithm projects 3D particle position information onto a 2D image, and goes through two stages: performing collision processing and performing actual rendering based on this. In the first step, collision processing between particles is performed using a 2D texture that stores the 3D world space positions of particles called collision detection textures, and the positions are updated. The second step is to utilize the buffer used in the first step. The buffer has 3D position information that has been processed to collision, and if it is used, a quad is created through a geometric shader and rendered in the form of particles to produce the final result.
