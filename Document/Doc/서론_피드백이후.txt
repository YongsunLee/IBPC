게임과 같은 실시간 렌더링 환경에서는 높은 품질의 렌더링 된 장면을 실시간으로 보여줘야 하기 때문에 정해진 시간(60hz or 144hz)안에 렌더링을 끝내기 위해 오래 걸리는 계산을 간략화 하거나 생략한다. 이렇게 생략되는 부분에는 파티클 충돌이 포함되어 있는 경우가 많이 존재한다.
시간이 지남에 따라 그래픽 프로세서의 성능이 점점 더 좋아져 짧은 시간 내에 더 많은 계산을 처리할 수 있게 되었지만, 향상된 그래픽 프로세서를 사용해도 물리처리와 같이 계산이 필요한 객체가 많아질수록 계산량이 기하급수적으로 증가하는 문제를 실시간으로 처리하기에는 부족하다. 이러한 문제를 해결하기 위해 octal tree, binary space partition, kd tree[1]와 같은 알고리즘을 이용해 3차원의 공간을 분할하여 한 번에 처리해야 할 객체의 수를 줄여 계산량을 줄일 수 있는 방식이 제안되었고 사용되어 왔다. 
움직임이 정확하게 계산되지 않아도 게임 플레이에 큰 영향을 주지 않는 파티클 이펙트 렌더링의 경우 Screen Space Depth Buffer Based Collision [2,3]과 같은 연구를 통해 정확도가 떨어지는 대신 더 빠르게 계산할 수 있는 방법이 제안되었다. 그러나 해당 방식은 파티클과 지오메트리 오브젝트에 대한 충돌 검사이며, 여전히 파티클 간의 충돌 처리처럼 한 장면에서 계산해야 할 객체가 많은 경우는 성능에 대한 부하가 높아 객체의 개수를 줄이거나 제한된 경우에만 충돌계산을 하여 계산량을 줄이는 것이 일반적으로 사용되며 또한 시각적으로 큰 문제가 없는 경우에는 충돌 처리를 진행하지 않는 경우도 존재한다. 
본 논문에서는 많은 수의 파티클 간의 실시간 충돌 알고리즘을 제안한다. 해당 연구 프로젝트는 OpenGL로 진행하였고 삼차원 파티클 위치 정보를 2차원 이미지에 투영하고 이를 기반으로 충돌 처리를 수행하는 단계와 실제 렌더링을 수행하는 두단계를 거친다. 
첫 단계에선 파티클간의 충돌처리를 수행하며 위치를 업데이트한다. 이때 사용되는 데이터는 파티클의 3차원 월드 공간의 위치를 저장한 2차원 형태의 텍스처이며 이를 충돌 감지 텍스처라 칭한다. 초기화 단계에서는 CPU를 통해 정점 데이터(Vertex Data)를 입력으로 받으며 업데이트를 진행한다. 첫 프레임에는 충돌 감지 텍스처가 생성되지 않았기 때문에 충돌처리가 진행되지 않고 파티클의 업데이트만 진행한다. 
초기화 이후 프레임에서는 각 파티클의 충돌 처리를 위해 입력된 정점 데이터에 뷰 프로젝션 행렬(View Projection Matrix)를 곱하여 (-1,1)사이의 값을 가지는 화면 공간 좌표(Screen Space Coordinate)로 변경한다. 변경된 데이터의 x,y좌표를 변형하여 (0,1)사이의 값을 가지는 텍스처 좌표(Texture Coordinates)로 변환하고 해당 좌표 값에 충돌 감지 텍스처의 가로, 세로 해상도 크기를 곱하여 현재 입력된 파티클의 텍셀(Texel)을 얻는다. 얻어진 텍셀을 texelFetch 함수를 이용하여 충돌 감지 텍스처에 저장된 3차원 위치 정보를 읽어온다. 주어진 탐색 범위를 샘플링하며 해당 범위 내에 파티클의 3차원 위치 정보를 얻어 현재의 파티클 위치와의 거리를 계산하여 비교한다. 그중 가장 작은 값과 충돌을 진행한다. 첫 단계의 기하 셰이더(Geometry Shader)에서는 Transform Feedback 기능을 통해 파티클 정점의 데이터가 저장되어 있는 Transform Feedback Buffer Object를 갱신하며, 프래그먼트 셰이더(Fragment Shader)에서 파티클의 3차원 좌표 형태의 값을 컬러 코드로 변환하여 충돌 탐지 텍스처를 갱신한다. 
두번째 단계는 첫번째 단계에서 업데이트된 Transform Feedback Buffer Object를 입력 데이터로 이용하여 기하 셰이더(Geometry Shader)를 통해 빌보드 형태의 쿼드로 변형하여 파티클을 그려주는 단계를 거친다. 이때 충돌된 파티클의 색상을 빨간색으로 충돌하지 않은 파티클은 녹색으로 렌더링한다. 
제안된 방법은 파티클당 충돌처리를 O(n) (화면에 존재하는 파티클 개수 * 샘플링하는 텍셀 개수) 복잡도로 끝마칠 수 있다. 결과적으로 실험을 통해서 평균 71ms 이내에 125,000개의 파티클 충돌 처리를 진행할 수 있었다.
본 논문의 구성은 다음과 같다. 제2절에서는 관련연구에 대해 설명한다. 제3절에서는 연구에 사용된 파티클 시스템 및 파티클간 충돌처리 시스템에 대해 설명하고, 제4절에서는 제안한 기술을 이용한 파티클 개수와 파티클 밀도 차이에 따른 성능 측정 데이터를 보이며, 제5절에서는 결론 및 문제점과 향후 연구방향을 설명한다.
