본 논문에서는 파티클과 오브젝트(Object)간의 충돌이 아닌 파티클과 파티클의 실시간 충돌 알고리즘을 제안한다. 해당 연구 프로젝트는 OpenGL로 진행하였고 충돌처리 패스와 렌더링 패스 두단계를 거친다. 
첫 단계는 파티클의 업데이트 및 충돌을 처리하고 파티클의 월드 공간 위치(World Space Position)을 저장한 충돌 감지 텍스처(Collision Detection Texture)를 만든다. 초기화 단계에서는 CPU를 통해 정점 데이터(Vertex Data)를 입력으로 받으며 업데이트를 진행한다. 첫 프레임에는 충돌 감지 텍스처가 생성되지 않았기 때문에 충돌처리가 진행되지 않고 파티클의 업데이트만 진행한다. 
초기화 이후 프레임에서는 입력된 데이터에 뷰 프로젝션 행렬(View Projection Matrix)를 곱하여 동차좌표(Homogeneous Coordinates)로 변경한다. 변경된 데이터의 x,y좌표를 변형하여 (0,1)사이의 값을 가지는 텍스처 좌표(Texture Coordinates)로 변환하고 해당 좌표 값에 충돌 감지 텍스처의 가로, 세로 해상도 크기를 곱하여 현재 입력된 파티클의 텍셀(Texel)을 얻는다. 얻어진 텍셀을 TexelFetch 함수를 이용하여 충돌 감지 텍스처에 저장된 위치 값을 읽어온다. 현재 파티클 주변의 설정된 탐색 범위를 샘플링하며 해당 범위 내에 파티클의 위치 값을 변환하여 현재의 파티클 위치와의 거리를 계산하여 비교한다. 그중 가장 작은 값과 충돌을 진행한다. 
충돌 단계의 기하 셰이더(Geometry Shader)에서는 Transform Feedback 기능을 통해 파티클 정점의 데이터가 저장되어 있는 Transform Feedback Buffer Object를 갱신하며, 프래그먼트 셰이더(Fragment Shader)에서 파티클 정점의 위치를 출력 값으로 하여 충돌 탐지 텍스처를 갱신한다.
두번째 단계는 첫번째 단계에서 업데이트된 Transform Feedback Buffer Object를 입력 데이터로 이용하여 기하 셰이더(Geometry Shader)를 통해 빌보드 형태로 변형하여 파티클을 그려주는 단계를 거친다. 이때 충돌된 파티클의 색상을 빨간색으로 충돌하지 않은 파티클은 녹색으로 렌더링한다.
사용한 파티클 시스템은 OpenGL의 Transform Feedback 기능을 이용하여 초기화를 제외하고 GPU에서 업데이트 된다. 해당 기능은 정점 셰이더(Vertex Shader)또는 기하 셰이더(Geometry Shader)의 출력을 Transform Feedback Buffer Object로 지정한 Buffer Object에 Capturing 하게 되며, 해당 Output Buffer는 다음 그리기(draw)에 정점 데이터의 입력으로 사용하여 GPU를 통한 업데이트를 진행할 수 있도록 한다. 


