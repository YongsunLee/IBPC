본 논문에서는 기존에 사용되던 오브젝트와 파티클 간의 충돌 처리와 함께 사용될 수 있는 많은 수의 파티클 간의 실시간 충돌 처리에 대한 새로운 방식을 제시한다. 

본 논문에서 사용된 파티클 시스템은 OpenGL이 제공하는 Transform Feedback 기능을 이용하여 CPU는 파티클 정점의 초기화 부분에서만 데이터에 관여한다. 파티클 정점들은 Transform Feedback Buffer가 생성될 때 초기화된 후 그래픽스 파이프라인에 바인딩 된 이후에는 OpenGL에서 제공되는 Transform Feedback 기능을 통해서만 갱신된다. 

연구 프로젝트는 OpenGL로 진행하였고, 충돌 처리 패스와 렌더링 패스를 사용하는 2단계 알고리즘으로 구성되어 있다.  

첫번째 단계의 초기화시 충돌 감지 텍스처가 생성되지 않았기 때문에 충돌이 진행되지 않고 파티클의 업데이트만 진행되며 이때 충돌 감지 텍스처가 생성된다. 초기화 이후 프레임에서는 정점 셰이더에 입력된 데이터를 각 원소에1을 더하고 2로 나누어 텍스처 좌표(Texture Coordinate)로 변경하고 해당 좌표 값에 충돌 감지 텍스처의 가로, 세로의 크기를 곱하여 현재 파티클의 텍셀을 구한다. 

정점 셰이더에서 TexelFetch기능을 이용하여 충돌 감지 텍스처에 저장된 위치 값을 읽어온다. 미리 설정해둔 기준 텍셀 주변의 탐색 범위를 샘플링하며 해당 범위 내에 위치 값을 변환하여 현재의 파티클 위치와의 거리를 계산하여 비교한다. 

충돌 단계의 기하 셰이더(Geometry Shader)에서는 Transform Feedback 기능을 통해 파티클 정점이 저장되어 있는 Transform Feedback Buffer Object를 갱신하며, 프래그먼트 셰이더(Fragment Shader)에서 파티클 정점의 위치를 출력 값으로 하여 충돌 탐지 텍스처를 갱신한다.

렌더링 단계의 정점 셰이더는 갱신된 Transform Feedback Buffer Object를 입력 정점 버퍼로 사용하며, 기하 셰이더를 통하여 입력된 정점 데이터를 빌보드 형태로 변경한다. 이후 프래그먼트 셰이더에서 충돌한 파티클의 색상을 빨간색으로 충돌하지 않은 파티클은 녹색으로 렌더링한다. 
