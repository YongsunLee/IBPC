본 논문에서는 CPU의 간섭을 줄이고 GPU에서 연산을 처리하기 위해서 OpenGL의 기능인 Transform Feedback을 사용한다. 
Transfrom Feedback은 그래픽스 파이프라인 Vertex Processing 단계에서 처리되는 기능으로 Vertex Shader또는 Geomtry Shader를 사용하는 경우 Geomtry Shader에서 데이터를 출력한다. Transform Feedback이 설정되어있는 경우 생성된 프리미티브를 캡쳐하여 프리미티브의 데이터를 Transform Feedback Buffer Object에 기록한다. 이를 통해 현재 렌더링 상태를 보존하고 이 데이터를 다음 렌더링 단계의 입력으로 사용할 수 있는 기술이다. 
Texture Lookup은 프로그램 가능한 Vertex Shader, Fragment Shader 등에서 텍스처를 바인딩하여 샘플링할 수 있도록 하는 기능이다. 기본적으로 Fragment Shader에서 텍스처 매핑에 사용된다. 본 논문에서는 충돌 탐지 텍스처를 Vertex Shader에서 바인딩하여 샘플링하기 위해 사용된다.

-------------------------------------------------------------------------------------------------

본 논문에서는 CPU의 간섭을 줄이고 GPU에서 연산을 처리하기 위해서 OpenGL의 기능인 Transform Feedback을 사용한다. Transfrom Feedback은 그래픽스 파이프라인 Vertex Processing 단계에서 처리되는 기능으로 정점 셰이더(Vertex Shader)또는 기하 셰이더(Geomtry Shader)를 사용하는 경우 기하 셰이더에서 데이터를 출력한다. 해당 기능은 정점 셰이더(Vertex Shader)의 출력데이터를 Transform Feedback Buffer Object로 지정한 Buffer Object에 Capturing하게 되며 해당 Output Buffer는 다음 그리기(draw)에 정점 데이터의 입력으로 사용하는 기능으로 GPU를 통한 업데이트를 진행할 수 있도록 한다.  Transform Feedback 사용하지 않은 Vertex Attribute의 이동은 CPU에서 Particle의 정점 데이터를 변경하고 변경된 Vertex Data를 GPU로 전송하여 GPU에서 렌더링을 진행하는 방식인 반면에 Transform Feedback를 사용한 경우 VBO를 생성하여 정점 데이터를 전송하는 부분은 똑같이 진행되지만 GPU에서 정점 데이터를 변경하고 GPU에서 렌더링한다. Transform Feedback을 사용하는 경우 Buffer Object의 크기를 계산하여 사용해야 한다. 정점 셰이더에서 출력된 정점들이 기록되는 것은 데이터 양의 변화가 없으나 기하 셰이더를 사용하는 경우 EmitVertex()함수에 의해 생성된 정점들의 데이터를 포함하여 저장하게 된다. 즉, 데이터의 양이 변화되는 것을 의미한다. 본 논문에서는 두가지 단계에서 Buffer Object를 이용하는데 충돌 패스에서는 기하 셰이더를 사용하고 Transform Feedback을 이용하지만 gs out vertex max 값을 1로 지정하였기 때문에 Vertex의 갯수에 변화가 없다. 렌더 패스에서는 gs out vertex max가 4개의 값을 가지고 있지만 Transform Feedback 기능을 사용하지 않기 때문에 Buffer Object의 SIZE를 같은 값으로 초기화 하고있다.



